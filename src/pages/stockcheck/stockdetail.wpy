<style lang="less">
  @import "../../less/mixin";

  .stockdetail-table {
    .flex();
    flex: 1;
    flex-direction: column;
    overflow: hidden;

    .table-body {
      flex: 1;
      height: 100%;
      overflow: hidden;
    }

    .table-cell:not(:last-child) {
      flex: none;
      width: 80px;
      color: #777;
    }

    .table-cell .detail-text {
      display: inline-block;
      padding: 3px 5px;
      color: rgb(1, 69, 142);
    }
  }
</style>
<template>
  <view class="table stockdetail-table">
    <view class="table-row table-header">
      <view class="table-cell th">操作人</view>
      <view class="table-cell th">数量</view>
      <view class="table-cell th">详情</view>
      <view class="table-cell th"></view>
    </view>
    <scroll-view scroll-y="true" class="table-body">
      <block wx:for="{{dataList}}" wx:key="index">
        <view class="table-row">
          <view class="table-cell td">{{item.userName}}</view>
          <view class="table-cell td">{{item.count}}</view>
          <view class="table-cell td">
            <text class="detail-text" @tap="viewDetailList({{item.id}})">查看详情</text>
          </view>
          <view class="table-cell td"></view>
        </view>
      </block>
    </scroll-view>
  </view>

</template>

<script>
  import wepy from 'wepy'
  import fetch from '../../service/fetch'
  import { showError } from '../../utils/util'

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '云盘库'
    }

    components = {}

    data = {
      dataList: []
    }

    computed = {}

    watch = {}

    methods = {
      viewDetailList (inventoryId) {
        this.$navigate('/pages/stockcheck/stockdetaillist', { inventoryId, tabIndex: this.tabIndex })
      }
    }

    queryList (number) {
      let params = {
        number
      }
      this.loaded = false
      return new Promise((resolve, reject) => {
        fetch.get('query/InventoryDetail', params).then(res => {
          if (res.success) {
            this.dataList = res.data.inventorys
            resolve(res.data.inventorys)
            this.$apply()
          } else {
            reject(res.message)
            showError(res.message)
          }
        }, errMsg => {
          reject(errMsg)
          showError(errMsg)
        })
      }).finally(res => {
        this.loaded = true
      })
    }

    onLoad (params) {
      this.tabIndex = params.tabIndex
      this.queryList(params.inventoryNumber)
    }
  }
</script>
