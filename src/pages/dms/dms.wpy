<style lang="less">
  @import "../../less/mixin";

  page {
    padding-bottom: 102rpx;
  }

  .top-actions{
    .flex-v-center();
    justify-content: space-between;
    padding: 10rpx 40rpx;
    background-color: #fff;

    .switcher {
      transform: scale(0.8);
      transform-origin: 100% 50%;
    }
  }

  .bill-form{
    background-color: #fff;
    padding: 0 20rpx 20rpx 20rpx;
  }

  .bill-form-body {
    border: 4rpx solid #ddd;
    border-radius: 16rpx;
    padding: 10rpx;
  }

  .dms-switch-button {
    width: 366rpx;
  }

  .bill-field {
    .flex-v-center();
    padding: 6rpx;

    .form-item {
      margin-bottom: 0;
    }
    .bill-label {
      width: 30%;
    }

    &:nth-child(2) {
      .bill-label{
        letter-spacing: 16rpx;
      }
    }
  }

  .scan-fields {
    .flex();
    justify-content: space-around;
    background-color: #fff;
    padding-bottom: 20rpx;

    .button {
      width: 40%
    }

    .form-item{
      margin-bottom: 0;
      flex: 1;
    }

    .switch-button-wrap{
      margin-left: 30rpx;
    }
  }

  .dms-table {
    .flex();
    flex: 1;
    flex-direction: column;
    overflow: hidden;

    .table-body {
      flex: 1;
      height: 100%;
      overflow: hidden;
    }

    .table-cell {

      font-size: 26rpx;
      padding-left: 6rpx;
      padding-right: 6rpx;

      &.order {
        width: 70rpx;
      }
      &.upn {
        flex: none;
        width: 220rpx;
      }
      &.status {
        flex: none;
        width: 140rpx;
      }
      &.dms-status {
        flex: none;
        width: 120rpx;
      }
      &.last {
        flex: none;
        width: 50rpx;
      }

      .cauth-icon {
        margin-left: 6rpx;
      }
    }

    .table-cell-inner {
      margin-bottom: 6rpx;
      text-align: left;

      text:first-child {
        display: inline-block;
        margin-right: 12rpx;
        width: 60rpx;
        color: #999;
      }
    }
  }

  .page-actions {
    .flex();
    justify-content: space-around;
    margin-top: 20rpx;
    margin-bottom: 20rpx;
    text-align: center;

    .button {
      width: 40%;
    }
  }

  .modal-formitem {
    .flex-h-center();

    .modal-label {
      width: 120rpx;
      text-align: right;
    }

    .form-item {
      flex: 1;
      margin-bottom: 0;
    }
  }

  .modal-confirm {
    view {
      text-align: center;
      margin-bottom: 16rpx;
      font-size: 32rpx;
    }
  }

  .modal-footer {
    .flex-h-center();
    padding-top: 30rpx;
  }

  .update-button {
    .flex-center();
    padding-left: 40rpx;
    padding-right: 40rpx;
    border-radius: 8rpx;
    flex-direction: row;
    color: #fff;
    background-color: @gcolor;
    height: @normal;

    &:active {
      background-color: darken(@gcolor, 10%);
    }

    &.cancel {
      color: #666;
      background-color: #e0e0e0;
      margin-right: 40rpx;
      &:active{
        background-color: darken(#e5e5e5, 10%);
      }
    }

  }

  .remark-container {
    position: relative;
    -webkit-flex: 1;
    flex: 1;

    .icon-img {
      width: 24rpx !important;
      height: 24rpx !important;
      vertical-align: middle;
    }
  }

  .remark-input {
    .icon-left {
      position: absolute;
      right: 10rpx;
      top: 16rpx;
      margin: 0;
    }
  }

  .remark-history-dropdown {
    position: absolute;
    left: 0;
    right: 0;
    top: 100%;
    margin-top: -2rpx;
    background-color: #fff;
    border:1px solid #ccc;
    padding-top: 10rpx;
    padding-bottom: 10rpx;

    > view {
      padding: 10rpx 24rpx;

      &:active {
        background-color: #f5f5f5;
      }
    }
  }

  .download-url {
    padding: 16rpx 30rpx;
    border: 2rpx solid #c5c5c5;
    background-color: #f0f0f0;
    color: #01458e;
    border-radius: 8rpx;
    margin-top: 10rpx;
    word-wrap: break-word;
    word-break: break-all;

    &:active {
      background-color: #ececec;
    }
  }

  .expQr-modal {
    position: fixed;
    left: 0;
    right: 0;
    top: 0;
    bottom: 0;
    background-color: rgba(0,0,0,.5);
    z-index: 5000;
  }

  .expQr-content {
    position: absolute;
    left: 50%;
    top: 10%;
    transform: translateX(-50%);
    background-color: #fff;
    padding: 35px 20px;
    border-radius: 8px;
    white-space: nowrap;
    font-size: 15px;
  }

  .expQr-close {
    position: absolute;
    right: 0;
    top: 0;
    padding: 5px;
  }
</style>
<template>
  <view class="top-actions">
    <text class="bill-number">单据号：{{lastReceiptNo}}</text>
    <view class="switch">
      <text class="switch-hint">连扫</text>
      <switch color="#01458e" class="switcher" checked="{{scanContinue}}" @change="switchChange"/>
    </view>
  </view>
  <view class="bill-form">
    <view class="bill-form-body">
      <view class="bill-field">
        <text class="bill-label">经销商code：</text>
       <!-- <switchbutton :buttons="switchButtons" :switchIndex.sync="switchIndex" :disabled.sync="pageDisabled" class="dms-switch-button" @tap.user="switchButton1Tap"></switchbutton>-->
        <text style="margin-left: 10rpx;">{{userCode}}</text>
      </view>
      <view class="bill-field">
        <text class="bill-label">备 注：</text>
        <view class="remark-container">
          <remarkinput class="remark-input" placeholder="备注可以为空" icon="angle-down-black.png" :value.sync="remark" :disabled.sync="pageDisabled" @focus.user="remarkFocus" @blur.user="remarkBlur" @change.user="remarkChange"></remarkinput>
          <view class="remark-history-dropdown" hidden="{{!showRemarkDropDown}}">
            <block wx:for="{{remarkHistory}}" wx:key="index">
              <view @tap="onHistoryItemTap({{item}})">{{item}}</view>
            </block>
          </view>
        </view>
      </view>
    </view>
  </view>

  <view class="scan-fields">
    <scanbutton icon="qr-code.svg" :disabled.sync="cantScan" @tap.user="onScanTap">扫 码</scanbutton>
    <historybutton icon="history.svg" @tap.user="onHistoryTap">再次提交</historybutton>
  </view>

  <view class="table dms-table">
    <view class="table-row table-header">
      <view class="table-cell th order">序号</view>
      <view class="table-cell th">单据信息</view>
      <view class="table-cell th status">小程序状态</view>
      <view class="table-cell th dms-status">DMS状态</view>
      <view class="table-cell th last"></view>
    </view>
    <scroll-view scroll-y="true" class="table-body">
      <block wx:for="{{dataList}}" wx:key="index">
        <view class="table-row">
          <view class="table-cell td order">{{item.listIndex}}</view>
          <view class="table-cell td">
            <view class="table-cell-inner">
              <text>QR</text>
              <text>{{item.qrcode}}</text>
            </view>
            <view class="table-cell-inner">
              <text>UPN</text>
              <text>{{item.upn}}</text>
            </view>
            <view class="table-cell-inner">
              <text>LOT</text>
              <text>{{item.lot}}</text>
            </view>
          </view>
          <view class="table-cell td status">{{item.statusText}}</view>
          <view class="table-cell td dms-status">{{item.dmsStatus}}</view>
          <view class="table-cell td last">
            <view class="icon-delete" @tap="delTap({{item}})" wx:if="{{item.status !== 'submit'}}">
              <deleteIcon name="delete.svg"></deleteIcon>
            </view>
          </view>
        </view>
      </block>
    </scroll-view>
  </view>

  <view class="page-actions">
    <submitbutton inline="true" :disabled.sync="submitDisabled" @tap.user="submitReceipt">提 交</submitbutton>
    <exportbutton inline="true" :disabled.sync="exportDisabled" @tap.user="exportReceipt">导出</exportbutton>
  </view>

  <modal1 :show.sync="isModalShow" title="提示">
    <view class="modal-confirm">
      <view>信息完整的<text class="h">{{dataList.length-failedCount}}</text>条</view>
      <view>缺少信息的<text class="h">{{failedCount}}</text>条</view>
      <view>确认提交吗?</view>
    </view>
    <view class="modal-footer">
      <view class="update-button cancel" @tap="closeModal">取消</view>
      <view class="update-button" @tap="doUploadReceipt">确定</view>
    </view>
  </modal1>

  <modal2 :show.sync="isExptModalShow" title="提示信息">
    <view>点击复制下面的链接去浏览器下载</view>
    <view class="download-url" @tap="onDownloadTap">{{downloadUrl}}</view>
  </modal2>

  <view class="expQr-modal" wx:if="{{expQrVisible}}">
    <view class="expQr-content" @tap="gotoMessage">
      <view>此产品为近效期产品，<text style="color:#10458e;">点击查看</text></view>
      <view class="expQr-close" @tap.stop="hideExpQr">
        <closeIcon name="close-gray.svg"></closeIcon>
      </view>
    </view>
  </view>

  <tabbar :tabBar="tabBar" disabled="true" @tabbarChange.user="tabbarChange"></tabbar>

</template>

<script>
  import wepy from 'wepy'
  import fetch from '../../service/fetch'
  import Formitem from '../../components/formitem'
  import Switchbutton from '../../components/switchbutton'
  import Icon from '../../components/icon'
  import Button from '../../components/button'
  import Tabbar from '../../components/tabbar'
  import Modal from '../../components/modal'
  import {History} from '../../service/history'
  import {session} from '../../service/auth'
  import log from '../../service/log'
  import {showError, showToast} from '../../utils/util'

  const STATUS_MAP = {
    'waitSubmit': '待提交',
    'submit': '已提交',
    'noProduct': '缺信息',
    'error': '提交失败'
  }

  // eslint-disable-next-line
  const subSuffix = (str, subLen) => {
    if (typeof str !== 'string') return ''
    if (str.length <= subLen || typeof subLen !== 'number') return str
    return `...${str.substr(str.length - subLen, str.length)}`
  }

  const isEmptyObject = obj => {
    for (let key in obj) {
      return false
    }
    return true
  }

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '二维码上传DMS'
    }

    components = {
      remarkinput: Formitem,
      qrinput: Formitem,
      upninput: Formitem,
      lotinput: Formitem,
      switchbutton: Switchbutton,
      submitbutton: Button,
      exportbutton: Button,
      scanbutton: Button,
      historybutton: Button,
      updatebutton: Button,
      deleteIcon: Icon,
      cauthIcon: Icon,
      tabbar: Tabbar,
      modal1: Modal,
      modal2: Modal,
      closeIcon: Icon
    }

    listIndex = 0

    history = new History('REMARK_HISTORY', 5)

    data = {
      pageDisabled: false,
      submitDisabled: true,
      scanContinue: true,
      scanDisable: false,
      cantScan: false,
      isModalShow: false,
      isExptModalShow: false,
      showRemarkDropDown: false,
      expQrVisible: false,
      failedCount: 0,
      uploadType: '移库',
      expQrMsg: '',
      remark: '',
      lastReceiptId: '',
      lastReceiptNo: '',
      lastQrcode: '',
      upn: '',
      lot: '',
      userCode: '',
      downloadUrl: 'http://www.xxx.com',
      dataList: [],
      remarkHistory: [],
      switchIndex: 0,
      switchButtons: ['移库', '上报销量'],
      tabBar: {
        color: '#777',
        selectedColor: '#01458e',
        borderStyle: '#ddd',
        backgroundColor: '#fff',
        list: [
          {
            text: '扫码',
            icon: 'scan-new.svg',
            selectedIcon: 'scan-new-selected.svg'
          },
          {
            text: '列表',
            icon: 'list.svg',
            selectedIcon: 'list-selected.png'
          }
        ]
      }
    }

    computed = {
      exportDisabled () {
        return !this.lastReceiptId
      }
    }

    watch = {
      scanDisable (value) {
        if (value === true) {
          this.cantScan = true
        } else {
          this.cantScan = this.pageDisabled
        }
      }
    }

    methods = {
      switchButton1Tap (index) {
        this.switchIndex = index
        this.uploadType = this.switchButtons[index]
        this.updateReceipt()
      },
      remarkChange (e) {
        let val = e.detail.value
        this.remark = val
        this.updateReceipt()
      },
      remarkFocus () {
        this.remarkHistory = this.history.getAll()
        this.showRemarkDropDown = this.remarkHistory.length > 0
      },
      remarkBlur () {
        this.showRemarkDropDown = false
      },
      onHistoryItemTap (item) {
        setTimeout(() => {
          this.remark = item.remark
          this.$apply()
        }, 80)
      },
      upnChange (e) {
        this.upn = e.detail.value
      },
      lotChange (e) {
        this.lot = e.detail.value
      },
      switchChange (e) {
        this.scanContinue = e.detail.value
      },
      tabbarChange (index) {
        if (index === 1) {
          this.$navigate('/pages/dmslist/dmslist')
        }
      },
      onScanTap () {
        this.launchScaner()
      },
      onHistoryTap () {
        this.$navigate('/pages/dmshistory/dmshistory')
      },
      delTap (item) {
        this.deleteQrcode(item.receiptId, item.productId)
      },
      submitReceipt () {
        const failed = this.dataList.filter(item => !item.upn && !item.lot)
        this.failedCount = failed.length
        if (this.failedCount > 0) {
          this.showModal()
        } else {
          this.uploadReceipt()
        }
      },
      exportReceipt () {
        if (!this.lastReceiptId) return
        fetch.get('receipt/export', {receiptId: this.lastReceiptId}).then(res => {
          if (res.success) {
            if (res.data.url) {
              this.downloadUrl = res.data.url
              this.showExptModal()
            } else {
              showError('导出的数据为空')
            }
          } else {
            showError(res.message)
          }
        }, showError)
      },
      doUploadReceipt () {
        this.uploadReceipt()
      },
      updateReceiptQrcode () {
        this.updateReceiptQr()
      },
      closeModal() {
        this.hideModal()
      },
      closeExptModal() {
        this.hideExptModal()
      },
      hideExpQr() {
        this.expQrVisible = false
      },
      gotoMessage() {
        if (this.scanTimer) clearTimeout(this.scanTimer)
        this.expQrVisible = false
        this.$navigate('/pages/message/message')
      },
      onDownloadTap () {
        wx.setClipboardData({
          data: this.downloadUrl,
          success: () => {
            wx.getClipboardData({
              success: (res) => {
                if (res.data === this.downloadUrl) {
                  showToast('复制成功')
                } else {
                  showError('复制失败，请手动长按复制')
                }
              }
            })
          }
        })
      }
    }

    showModal () {
      this.isModalShow = true
      this.$apply()
    }

    hideModal() {
      this.isModalShow = false
      this.upn = ''
      this.lot = ''
      this.$apply()
    }

    showExptModal () {
      this.isExptModalShow = true
      this.$apply()
    }

    hideExptModal() {
      this.isExptModalShow = false
      this.upn = ''
      this.lot = ''
      this.$apply()
    }

    reset () {
      this.listIndex = 0
      this.switchIndex = 0
      this.failedCount = 0
      this.uploadType = this.switchButtons[this.switchIndex]
      this.remark = ''
      this.scanContinue = true
      this.submitDisabled = true
      this.pageDisabled = false
      this.scanDisable = false
      this.dataList = []
      this.isModalShow = false
      this.lastReceiptId = ''
      this.lastReceiptNo = ''
      this.lastQrcode = ''
      this.upn = ''
      this.lot = ''

      this.$apply()
    }

    launchScaner () {
      wepy.scanCode()
        .then(res => {
          this.addQrcode(res.result, this.scanContinue)
        })
    }

    showExpQr(msg) {
      this.expQrVisible = true
      this.expQrMsg = msg
      this.$apply()

      this.scanTimer = setTimeout(() => {
        this.expQrVisible = false
        this.$apply()
        this.launchScaner()
      }, 2000)
    }

    _addData(data, qrcode) {
      this.lastReceiptId = data.receipt.id
      this.lastQrcode = qrcode
      this.lastReceiptNo = data.receipt.receiptNo
      this.submitDisabled = false
      if (!data.product) {
        data.product = {}
      }
      this.addData(data)
    }

    addQrcode (qrcode, scanContinue) {
      return this.queryQrCode(qrcode).then(data => {
        this._addData(data, qrcode)
        if (scanContinue) {
          this.launchScaner()
        }
      }).catch(res => {
        this.dealScanError(res, qrcode, scanContinue)
      })
    }

    dealScanError(res, qrcode, scanContinue) {
      const { message: msg, data } = res
      let hasExpQr = false
      if (Array.isArray(msg)) {
        for (let i = 0; i < msg.length; i++) {
          const item = msg[i]
          if (item.type === 'expQr') {
            if (!isEmptyObject(data)) {
              this._addData(data, qrcode)
            }
            this.showExpQr(item.msg)
            hasExpQr = true
          } else if (item.type === 'normal') {
            showError(item.msg)
            if (scanContinue && !hasExpQr) {
              setTimeout(() => {
                this.launchScaner()
              }, 1500)
            }
          }
        }
      } else {
        showError(msg)
      }
    }

    addQrcodeByHistory (list) {
      list.forEach(item => {
        this.addQrcode(item)
      })
    }

    queryQrCode(data) {
      let params = {
        qrcode: data,
        receiptId: this.lastReceiptId,
        type: this.uploadType,
        remark: this.remark
      }
      return new Promise((resolve, reject) => {
        fetch.get('find/scan', params).then(res => {
          if (res.success) {
            resolve(res.data)
          } else {
            reject(res)
          }
        }, errMsg => {
          reject(errMsg)
        })
      })
    }

    queryReceipt(receiptId) {
      return new Promise((resolve, reject) => {
        fetch.get(`find/receipt/${receiptId}`).then(res => {
          if (res.success) {
            resolve(res.data)
          } else {
            reject(res.message)
          }
        }, errMsg => {
          reject(errMsg)
        })
      })
    }

    updateReceipt () {
      if (!this.lastReceiptId) return
      let params = {
        receiptId: this.lastReceiptId,
        type: this.uploadType,
        remark: this.remark
      }
      fetch.post('update/receipt', params, true, false).then(res => {
        if (res.success) {
          // showToast(res.message)
        } else {
          showError(res.message)
        }
      }, showError)
    }

    updateReceiptQr () {
      if (!this.lastReceiptId || !this.lastQrcode) return
      let params = {
        receiptId: this.lastReceiptId,
        qrcode: this.lastQrcode,
        upn: this.upn,
        lot: this.lot
      }

      if (!params.upn) return showError('请填写upn')
      if (!params.lot) return showError('请填写lot')

      fetch.post('update/receiptqr', params).then(res => {
        if (res.success) {
          this.addData(res.data)
          this.hideModal()
          showToast(res.message)
        } else {
          showError(res.message)
        }
      }, showError)
    }

    uploadReceipt () {
      let params = {
        receiptId: this.lastReceiptId,
        remark: this.remark
      }
      this.submitDisabled = true
      fetch.get('upload/receipt', params).then(res => {
        if (res.success) {
          showToast(res.message || '提交成功')
          this.history.add(this.remark)
          this.reset()
          this.removeHistory()
        } else {
          showError(res.message)
        }
      }, (msg) => {
        this.submitDisabled = false
        this.$apply()
        showError(msg)
      })
    }

    deleteQrcode (receiptId, qrId) {
      let params = {
        receiptId,
        qrId
      }
      fetch.get('remove/qr', params).then(res => {
        if (res.success) {
          this.removeData(qrId)
          showToast(res.message)
        } else {
          showError(res.message)
        }
      }, showError)
    }

    addData (data) {
      let rowData = {}
      rowData.listIndex = ++this.listIndex
      rowData.status = data.receipt.status
      rowData.statusText = STATUS_MAP[data.product.status]
      rowData.dmsStatus = data.product.dmsStatus
      // rowData.qrcode = subSuffix(data.product.qrcode, 6)
      rowData.qrcode = data.product.qrcode
      rowData.type = data.receipt.type
      rowData.upn = data.product.upn
      // rowData.lot = subSuffix(data.product.lot, 4)
      rowData.lot = data.product.lot
      rowData.productId = data.product.id
      rowData.receiptId = data.receipt.id
      /**
       * 倒序排序
       */
      this.dataList.unshift(rowData)
      this.$apply()
    }

    removeHistory () {
      wx.removeStorageSync('DMS_HISTORY')
    }

    addDataByReceipt (data) {
      this.listIndex = 0
      this.dataList = []
      data.receiptQr.forEach(item => {
        let rowData = {}
        rowData.listIndex = ++this.listIndex
        rowData.status = item.status
        rowData.statusText = STATUS_MAP[item.status]
        rowData.dmsStatus = item.dmsStatus
        // rowData.qrcode = subSuffix(item.qrcode, 6)
        rowData.qrcode = item.qrcode
        rowData.type = item.type || data.type
        rowData.upn = item.upn
        // rowData.lot = subSuffix(item.lot, 4)
        rowData.lot = item.lot
        rowData.productId = item.id
        rowData.receiptId = data.id
        this.dataList.unshift(rowData)
      })

      this.$apply()
    }

    removeData (qrId) {
      let index

      for (let i = 0; i < this.dataList.length; i++) {
        if (this.dataList[i].productId === qrId) {
          index = i
          break
        }
      }

      if (index !== undefined) {
        this.dataList.splice(index, 1)
        if (this.getUnsubmitLengh() === 0) {
          this.submitDisabled = true
        }
        this.$apply()
      }
    }

    getUnsubmitLengh () {
      return this.dataList.filter(e => {
        return e.status !== 'submit'
      }).length
    }

    showReceipt (receiptId) {
      this.scanDisable = true
      this.removeHistory()
      this.queryReceipt(receiptId).then(data => {
        this.lastReceiptId = receiptId
        this.lastReceiptNo = data.receiptNo
        this.switchIndex = this.switchButtons.indexOf(data.type)
        this.uploadType = data.type
        this.remark = data.remark === '备注为空' ? '' : data.remark
        this.pageDisabled = data.status === 'submit'
        this.submitDisabled = this.pageDisabled
        this.addDataByReceipt(data)
      }, showError)
    }

    onShow () {
      let cacheData = wx.getStorageSync('DMS_HISTORY')
      if (cacheData) {
        let promises = cacheData.map(data => () => this.addQrcode(data, false))
        Promise.queue(promises).then(() => {
          console.log('add history done!')
        })
      }
    }

    onLoad () {
      this.listIndex = 0
      this.scanTimer = null
      this.userCode = session.get().user.code
      log.add('二维码上传DMS')
    }

    onUnload() {
      log.update()
    }
  }
</script>
